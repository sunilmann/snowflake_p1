
create or replace storage integration s3_int
type = external_stage
storage_provider = s3
enabled = true
storage_aws_role_arn = 'arn:aws:iam::627741535532:role/sunils3_role'
storage_allowed_locations = ('s3://sunils3buckett/');



DESC INTEGRATION s3_int;



create or replace table superstore(Row_ID int, Order_ID varchar, Order_Date date, Ship_Date date,Ship_Mode varchar(),Customer_ID
varchar(),Customer_Name string,Segment varchar(), Country varchar(),City varchar(),State varchar(),Postal_Code int, Region varchar(),
Product_ID varchar(),Category varchar(), Sub_Category varchar(),Product_Name varchar(),Sales float,Quantity int,Discount float,Profit float);


--file format creation

create or replace file format my_csv_format
type = csv field_delimiter = ',' 
field_optionally_enclosed_by ='"' skip_header=1
validate_UTF8=false 
null_if=('NULL', 'null')
empty_field_as_null = true;




--stage creation
create or replace stage fdb.PUBLIC.stage
url="s3://sunils3buckett" 
STORAGE_INTEGRATION=s3_int
file_format = my_csv_format;

--copy command
create or replace TASK mytask_on_thursday
WAREHOUSE = COMPUTE_WH,
SCHEDULE = 'USING CRON 0 12 * * */4 America/Los_Angeles'
AS
copy into fdb.PUBLIC.superstore 
from (select t.$1,t.$2 ,t.$3 ,t.$4,t.$5,t.$6 ,t.$7 ,t.$8,t.$9,t.$10 ,t.$11 ,t.$12,t.$13,t.$14 ,t.$15 ,t.$16,$17,t.$18 ,t.$19 ,t.$20 ,t.$21 from @fdb.public.stage t)
file_format=my_csv_format
on_error = 'skip_file';

list @fdb.public.stage;

select t.$1,t.$2 as first_name from   @db1.PUBLIC.sstage t;


select * from superstore_stream;

-------creating stream
create or replace  stream superstore_stream on table superstore;





create or replace table consumer_data(Row_ID int, Order_ID varchar, Order_Date date, Ship_Date date,Ship_Mode varchar(),Customer_ID
varchar(),Customer_Name string,Segment varchar(), Country varchar(),City varchar(),State varchar(),Postal_Code int, Region varchar(),
Product_ID varchar(),Category varchar(), Sub_Category varchar(),Product_Name varchar(),Sales float,Quantity int,Discount float,Profit float, 
stream_type string , rec_version number default 0,REC_DATE TIMESTAMP_LTZ);

merge into consumer_data cd
using superstore_stream ss 
on cd.Row_ID=ss.Row_Id and (metadata$action='DELETE')
when matched and metadata$isupdate='FALSE' then update set rec_version=9999, stream_type='DELETE'
when matched and metadata$isupdate='TRUE' then update set rec_version=9999, stream_type='DELETE'
when matched and metadata$isupdate='TRUE' then update set rec_version=rec_version-1
when not matched then
insert  (Row_ID , Order_ID , Order_Date , Ship_Date ,Ship_Mode ,Customer_ID
,Customer_Name ,Segment , Country ,City,State ,Postal_Code, Region,
Product_ID ,Category, Sub_Category,Product_Name,Sales ,Quantity ,Discount ,Profit,stream_type,rec_version,REC_DATE )

values(ss.Row_ID , ss.Order_ID , ss.Order_Date , ss.Ship_Date ,ss.Ship_Mode ,ss.Customer_ID
,ss.Customer_Name ,ss.Segment , ss.Country ,ss.City,ss.State ,ss.Postal_Code, ss.Region,
ss.Product_ID ,ss.Category, ss.Sub_Category,ss.Product_Name,ss.Sales ,ss.Quantity ,ss.Discount ,ss.Profit 
, metadata$action,0,CURRENT_TIMESTAMP() );



select * from superstore_stream;

select * from consumer_data ;




----Calculate the number of Orders those with Ship Mode as ‘Second Class’


select SHIP_MODE, count(SHIP_MODE) as orders from consumer_data
where SHIP_MODE = 'Second Class' group by SHIP_MODE;


---List down the most valuable customers Country wise

select CUSTOMER_ID,CUSTOMER_NAME,CITY,SALES from
(select CUSTOMER_ID,CUSTOMER_NAME,CITY,SALES,rank() over(partition by city order by SALES desc) as rank from consumer_data) 
where rank =1 order by SALES desc ;


-----Total Sales for Category ‘Furniture’

select CATEGORY, count(CATEGORY) as TOTAL_SALES from consumer_data
where CATEGORY = 'Furniture' group by CATEGORY;

-------Which Product provides the maximum profit 

select PRODUCT_NAME,max(profit) from consumer_data group by PRODUCT_NAME order by max(profit) desc;

----Calculate the total profit made by each product category country wise 
select PRODUCT_NAME,PROFIT from
(select PRODUCT_NAME,profit,rank() over(partition by PRODUCT_NAME order by profit desc) as rank from consumer_data )   ;

--Which region of United States have majority loss

select * from
(select REGION,PROFIT,rank() over(partition by REGION order by PROFIT desc) as rank from consumer_data) 
where rank = min(rank()) order by min(rank()) desc ;
